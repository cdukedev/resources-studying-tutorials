For me I look at these aspects...

Are the projects well organized...by looking at the directory structure naming, can I get a sense of the architecture/design - it is easy to figure out where to go in the project to locate the various functional areas and layers.
Is the code clean, easy to read and commented appropriately.
Is there an organized branching/tag process being followed, e.g. gitflow
Is there some sense that the person understands basic design patterns.
Does the project leverage existing open source libraries and frameworks (good) or does the code re-solve common problems/routines (bad)
Does the first thing I see (the README) clearly describe the project e.g. what it does, how to run and build it etc.
Do I see replicated code i.e. do I see obvious 'cut and paste' and 'repeating myself' code (bad)
ARE THERE TESTS!!!! There should be a test harness and if I run it (because the README told me how to run them), the tests should pass. This is a big one for me. If I don't see tests, the very first question I will ask will be 'how do/did you test this code' and your answer will be 'manually' which of course means you don't test!! IMO, professional quality code includes some level of unit/integration testing delivered along with it.
I am less concerned with what the project does, more concerned that it was developed professionally. I look for commercial quality code...will others be able to take the project and easily enhance/maintain it.
